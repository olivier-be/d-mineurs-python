from random import *
from tkinter import *
import webbrowser
from tkinter import messagebox
from time import sleep



# fenetre démineur
fenetre = Tk()
fenetre.title("démineur")
fenetre.geometry("445x493")
fenetre.minsize(410, 465)
fenetre.config(background='#FFFFFF')


# fenetre1
window = Tk()

window.title("démineur")
window.geometry("1080x720")
window.minsize(1080, 720)
window.iconbitmap("démineur.ico")
window.config(background='#FFFFFF')

#fenetre score board
score_board = Tk()

score_board.title("démineur")
score_board.geometry("1080x720")
score_board.minsize(1080, 720)
score_board.iconbitmap("démineur.ico")
score_board.config(background='#FFFFFF')

#sous fentre 1
frame = Frame(window, bg='#FFFFFF')


def open_github():
    webbrowser.open_new("https://github.com/olivier-be/d-mineurs-python")


def fermer_fenetre():
    window.quit()
    sleep(1)
    fenetre.mainloop()

# fenetre 1 bouton et texte
textedebut = Label(frame, text="bienvenue sur le démineur", font=("Courrier", 40), bg='#FFFFFF')
textedebut.pack(expand=YES)
credit = Label(frame, text="réaliser par Olivier,Yanis et Clément", font=("Courrier", 20), bg='#FFFFFF')
credit.pack(expand=YES)
gt_buttion = Button(frame, text="ouvrir github", font=("Courrier", 20), bg='#FFFFFF', command=open_github)
gt_buttion.pack(side=BOTTOM, pady=100)
quit_buttion = Button(frame, text="quitter crédit", font=("Courrier", 20), bg='#FFFFFF', command=fermer_fenetre)
quit_buttion.pack(side=BOTTOM, pady=50)

frame.pack(expand=YES)

#position mine
tabmine=[[0,0]]

for i in range (4):
    tabmine.append([randint(0,18),randint(0,9)])
print(tabmine)
nb = 1
tab=[Button]*200
score=0

#score ( case déactiver avant de toucher une mine )
def point():
    global score
    score=score+1
    return score
# affiche score précédant dans scoreboard
def score_precedent():
    with open("score.txt","a+") as file:
        nb_ligne= file.readlines()
        tab_score = [0]*len(nb_ligne)
        for x in range(len(nb_ligne)):
            tab_score[x]=int(file.read())
            print(nb_ligne,"&bc")
        tab_score.sort(reverse = True)
        for p in range(len(nb_ligne)):
            scoreint=str(tab_score)
            Label(score_board,text="{} avec le score de {}".format(p,scoreint))

    file.close()
score_precedent()

def minetoucher():
    print("vous avez perdu")
    global score
    messagebox.showerror(title="démineur", message=" tu as perdu \n partie termier !\n ton score est de {}".format(score))
    sleep(5)
    score=str(score)
    with open("score.txt","a+") as file:
        file.write(score+ "\n")
        print(score)
        file.close()
    window.destroy()
    fenetre.destroy()
    return 0



tabnb=[[0,0]]*191
tabm=[0]*191
i=1
z=1
e=1


def change_nom_proche(i,ligne,colonne):
    tab[i].grid_forget()
    Label(text="1",width=5).grid(row=ligne,column=colonne)




# creation grille button dans une matrice
i=1
def suprimer(i,ligne,colonne):
    tab[i].grid_forget()
    Label(text="0",width=5).grid(row=ligne, column=colonne)
z=0

for ligne in range(19):
    for colonne in range(10):
        if ligne == tabmine[1][0] and colonne == tabmine[1][1] or  ligne == tabmine[2][0] and colonne == tabmine[2][1] or ligne == tabmine[3][0] and colonne == tabmine[3][1] or ligne == tabmine[4][0] and colonne == tabmine[4][1] :
            tab[i]=Button(fenetre, text="mine0", command=lambda i=i: tab[i].grid_forget and point,bg='#111111',width=5)
            tab[i].grid(row=ligne, column=colonne)
            print("a", i)
        elif  ((ligne== tabmine[1][0] - 1 or ligne == tabmine[1][0] + 1 or ligne == tabmine[1][0]) and (colonne == tabmine[1][1] - 1 or colonne == tabmine[1][1] + 1 )) or ((ligne== tabmine[1][0] - 1 or ligne == tabmine[1][0] + 1) and (colonne == tabmine[1][1] - 1 or colonne == tabmine[1][1] + 1 or colonne == tabmine[1][1])):
            tab[i]=Button(fenetre, text="mine?",bg='#DC1010',width=5,command=lambda i=i,ligne=ligne,colonne=colonne: change_nom_proche(i,ligne,colonne) and point)
            tab[i].grid(row=ligne, column=colonne)
            print("2",i)
        elif  ((ligne== tabmine[2][0] - 1 or ligne == tabmine[2][0] + 1 or ligne == tabmine[2][0]) and (colonne == tabmine[2][1] - 1 or colonne == tabmine[2][1] + 1 )) or ((ligne== tabmine[2][0] - 1 or ligne == tabmine[2][0] + 1) and (colonne == tabmine[2][1] - 1 or colonne == tabmine[2][1] + 1 or colonne == tabmine[2][1])):
            tab[i]=Button(fenetre, text="mine?",bg='#DC1010',width=5,command=lambda i=i,ligne=ligne,colonne=colonne: change_nom_proche(i,ligne,colonne) and point)
            tab[i].grid(row=ligne, column=colonne)
            print("2",i)
        elif  ((ligne== tabmine[3][0] - 1 or ligne == tabmine[3][0] + 1 or ligne == tabmine[3][0]) and (colonne == tabmine[3][1] - 1 or colonne == tabmine[3][1] + 1 )) or( (ligne== tabmine[3][0] - 1 or ligne == tabmine[3][0] + 1 ) and (colonne == tabmine[3][1] - 1 or colonne == tabmine[3][1] + 1 or colonne == tabmine[3][1])):
            tab[i] = Button(fenetre, text="mine?",bg='#DC1010',width=5, command=lambda i=i,ligne=ligne,colonne=colonne: change_nom_proche(i,ligne,colonne) and point)
            tab[i].grid(row=ligne, column=colonne)
            print("2", i)
        elif  ((ligne== tabmine[4][0] - 1 or ligne == tabmine[4][0] + 1 or ligne == tabmine[4][0]) and (colonne == tabmine[4][1] - 1 or colonne == tabmine[4][1] + 1 )) or ((ligne== tabmine[4][0] - 1 or ligne == tabmine[4][0] + 1 ) and (colonne == tabmine[4][1] - 1 or colonne == tabmine[4][1] + 1 or colonne == tabmine[4][1])) :
            tab[i] = Button(fenetre, text="mine?",bg='#DC1010',width=5, command=lambda i=i,ligne=ligne,colonne=colonne: change_nom_proche(i,ligne,colonne) and point)
            tab[i].grid(row=ligne, column=colonne)
            print("2", i)
        else:
            tab[i] = Button(fenetre, text="mine?",width=5, command=lambda i=i,ligne=ligne,colonne=colonne: suprimer (i,ligne,colonne) and print(i))
            tab[i].grid(row=ligne,column=colonne)
            print(i)
        i=i+1

window.mainloop()
